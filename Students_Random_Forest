# -*- coding: utf-8 -*-
import numpy as np
import pandas as pd

df = pd.read_csv('student-por.csv', delimiter = ';')

####################################
#Data Adaptation

#Dropping rows with result = 0
df.drop(df[df.G3 == 0].index, inplace=True)

#Summing some columns
df['Pedu'] = df['Medu'] + df['Fedu']
df.drop(['Medu','Fedu'], axis=1, inplace = True)

#OneHotEncoding
df_categorical = df.select_dtypes(include=['object'])
df1 = pd.get_dummies(df).astype(int)
df1.info()

#Taking only the columns with the highest correlation with the result
df1.corr().abs()['G3'].sort_values()
df1.drop(['G2','G1', 'school_GP', 'address_U', 'internet_yes', 'sex_F' ], axis=1, inplace = True)
df1.drop(['higher_yes' ], axis=1, inplace = True)
most_correlated  = df1.corr().abs()['G3'].sort_values(ascending=False)

most_correlated = most_correlated[:9]
most_correlated
df1 = df1.loc[:, most_correlated.index]


#Separating X and Y train and test
  #Shuffle

from sklearn.utils import shuffle
df1 = shuffle(df1).reset_index(drop=True)

Y = np.asanyarray(df1.G3.astype(int))
X = df1.drop(['G3'], axis = 1)

#Making Categories for G3
#6-level classification based on Erasmus grade conversion system
    #19-20: exceptional
    #16-18: very good
    #14-15: good
    #12-13: satisfactory
    #10-11: sufficient
    #0-9 : fail
for i in range(len(Y)):
    if Y[i] < 10:
        Y[i] = 0
    elif Y[i] < 12 and Y[i] >= 10:
        Y[i] = 1
    elif Y[i] < 14 and Y[i] >= 12:
        Y[i] = 2
    elif Y[i] < 16 and Y[i] >= 14:
        Y[i] = 3
    elif Y[i] < 19 and Y[i] >= 16:
        Y[i] = 4
    else:
        Y[i] = 5

np.unique(Y)

# Split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.25)

np.unique(y_train)
np.unique(y_test)

#Scalling
from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)


#Random Forest
from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators = 1000, criterion = 'entropy', random_state = 0)
classifier.fit(X_train, y_train)

from sklearn.model_selection import cross_val_score
accuracies = cross_val_score(estimator=classifier, X = X_train, y = y_train, cv =10)
acc_mean = accuracies.mean()
acc_std = accuracies.std()
